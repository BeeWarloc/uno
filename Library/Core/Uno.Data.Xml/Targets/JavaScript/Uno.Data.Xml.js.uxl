<Extensions Backend="JavaScript">
    <Type Name="Uno.Data.Xml.XmlNodeHandle" />
    <Type Name="Uno.Data.Xml.XmlAttributeHandle" />
    <Type Name="Uno.Data.Xml.TargetSpecificXmlNode" />

    <Type Name="Uno.Data.Xml.XmlNodeImpl">
        <Method Signature="Parse(string):XmlNodeHandle">
            <Body><![CDATA[
                var xmlString = $0.trim();
                var parser = new DOMParser();
                var xml = parser.parseFromString(xmlString, "application/xml");
                if (xmlString.indexOf("<?xml") == 0)
                {
                    xml.declarationExists = true;
                }

                if (xml)
                {
                    var root = xml;
                    return @{Uno.Data.Xml.XmlNodeImpl.GenerateXMLTree(Uno.Data.Xml.TargetSpecificXmlNode):Call(@{Uno.Data.Xml.TargetSpecificXmlNode:Of(root)})};
                }
                else
                    return null;
            ]]></Body>
        </Method>

        <Method Signature="GenerateXMLTree(Uno.Data.Xml.TargetSpecificXmlNode):XmlNodeHandle">
            <Body><![CDATA[
                var node = $0,
                    nodeHandle;

                //error validation
                if (node.nodeName == "parsererror")
                {
                    throw @{Uno.Data.Xml.XmlException(string):New(node.innerText)};
                }

                if (node.nodeType == UnoDataXml.jsNodeTypes.Document)
                {
                    //create empty root element
                    nodeHandle = @{Uno.Data.Xml.XmlNodeHandle():New()};

                    //add declaration node if exists
                    if (node.declarationExists)
                    {
                        //firefox fixes
                        var xmlEncoding = !node.xmlEncoding ? node.characterSet: node.xmlEncoding;
                        var xmlVersion = !node.xmlVersion ? "1.0": node.xmlVersion;

                        var declarationNodeHandle = @{Uno.Data.Xml.XmlNodeHandle(string,string):New(xmlVersion, xmlEncoding)};
                        @{Uno.Data.Xml.XmlNodeImpl.AppendChild(Uno.Data.Xml.XmlNodeHandle,Uno.Data.Xml.XmlNodeHandle):Call(nodeHandle, declarationNodeHandle)};
                    }
                }
                else
                {
                    nodeHandle = @{Uno.Data.Xml.XmlNodeHandle(string,string,int):New(node.nodeName, node.nodeValue, UnoDataXml.$MapXmlNodeTypeToUnoType(node.nodeType))};
                }

                if (node.attributes)
                {
                    for (var i = 0; i < node.attributes.length; i++)
                    {
                        var attribute = node.attributes[i];
                        var attributeHandle = @{Uno.Data.Xml.XmlAttributeHandle(string,string):New(attribute.name, attribute.value)};
                        @{Uno.Data.Xml.XmlNodeImpl.AddAttribute(Uno.Data.Xml.XmlNodeHandle,Uno.Data.Xml.XmlAttributeHandle):Call(nodeHandle, attributeHandle)};
                    }
                }

                if (node.childNodes)
                {
                    for (var i = 0; i < node.childNodes.length; i++)
                    {
                        @{Uno.Data.Xml.XmlNodeImpl.AppendChild(Uno.Data.Xml.XmlNodeHandle,Uno.Data.Xml.XmlNodeHandle):Call(nodeHandle, @{Uno.Data.Xml.XmlNodeImpl.GenerateXMLTree(Uno.Data.Xml.TargetSpecificXmlNode):Call(@{Uno.Data.Xml.TargetSpecificXmlNode:Of(node.childNodes[i])})})};
                    }
                }

                return nodeHandle;
             ]]></Body>
        </Method>
    </Type>
</Extensions>
